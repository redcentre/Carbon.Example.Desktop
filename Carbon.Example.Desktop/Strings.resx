<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthErrorBadTimeout" xml:space="preserve">
    <value>Timeout must be between 10 and 60 seconds.</value>
  </data>
  <data name="AuthErrorBadUri" xml:space="preserve">
    <value>Service Base Uri incorrect format.</value>
  </data>
  <data name="AuthErrorNeedAdo" xml:space="preserve">
    <value>ADO Connection String is required.</value>
  </data>
  <data name="AuthErrorNeedBaseUri" xml:space="preserve">
    <value>RCS Licensing Base Address is required</value>
  </data>
  <data name="AuthErrorNeedId" xml:space="preserve">
    <value>User Id is required.</value>
  </data>
  <data name="AuthErrorNeedName" xml:space="preserve">
    <value>User Name is required.</value>
  </data>
  <data name="AuthErrorNeedPass" xml:space="preserve">
    <value>Password is required.</value>
  </data>
  <data name="AuthErrorNeedProdKey" xml:space="preserve">
    <value>Product Key is required.</value>
  </data>
  <data name="AuthHeadLicCreds" xml:space="preserve">
    <value>Licence Credentials</value>
  </data>
  <data name="AuthHeadLicProv" xml:space="preserve">
    <value>Licensing Provider</value>
  </data>
  <data name="AuthlabelAdoConnect" xml:space="preserve">
    <value>ADO Connection String</value>
  </data>
  <data name="AuthLabelApiKey" xml:space="preserve">
    <value>API Key (optional)</value>
  </data>
  <data name="AuthLabelBaseUri" xml:space="preserve">
    <value>Licensing service base Uri</value>
  </data>
  <data name="AuthLabelBPr" xml:space="preserve">
    <value>Bayes Price</value>
  </data>
  <data name="AuthLabelGetLic" xml:space="preserve">
    <value>Get Licence</value>
  </data>
  <data name="AuthLabelPass" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="AuthLabelProdKey" xml:space="preserve">
    <value>Product Key</value>
  </data>
  <data name="AuthLabelRCS" xml:space="preserve">
    <value>Red Centre</value>
  </data>
  <data name="AuthLabelRemember" xml:space="preserve">
    <value>Remember me</value>
  </data>
  <data name="AuthLabelTimeout" xml:space="preserve">
    <value>Timeout</value>
  </data>
  <data name="AuthLabelUserId" xml:space="preserve">
    <value>User Id</value>
  </data>
  <data name="AuthLabelUserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="BusyAuthenticating" xml:space="preserve">
    <value>Authenticating - Please wait...</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="DeleteTableConfirmPrompt" xml:space="preserve">
    <value>Are you sure you want to delete this report?\n\n{0}</value>
  </data>
  <data name="DeleteTableNotOwner" xml:space="preserve">
    <value>The report cannot be deleted because it is not under the TOC user node of your authenticated name {0}.</value>
  </data>
  <data name="LogColHeadCat" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="LogColHeadMessage" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="LogColHeadThread" xml:space="preserve">
    <value>Thread</value>
  </data>
  <data name="LogColHeadTime" xml:space="preserve">
    <value>Time</value>
  </data>
  <data name="MenuFileCloseLicText" xml:space="preserve">
    <value>_Close Licence</value>
  </data>
  <data name="MenuFileExitText" xml:space="preserve">
    <value>E_xit</value>
  </data>
  <data name="MenuFileGetLicText" xml:space="preserve">
    <value>_Get Licence</value>
  </data>
  <data name="MenuFileText" xml:space="preserve">
    <value>_File</value>
  </data>
  <data name="MenuHelpGithubText" xml:space="preserve">
    <value>_GitHub</value>
  </data>
  <data name="MenuHelpText" xml:space="preserve">
    <value>_Help</value>
  </data>
  <data name="NewReportName" xml:space="preserve">
    <value>New Report No.{0}</value>
  </data>
  <data name="NodeLabelAxes" xml:space="preserve">
    <value>Axes</value>
  </data>
  <data name="NodeLabelExecToc" xml:space="preserve">
    <value>Exec TOC</value>
  </data>
  <data name="NodeLabelFullToc" xml:space="preserve">
    <value>Full TOC</value>
  </data>
  <data name="NodeLabelSimpleToc" xml:space="preserve">
    <value>Simple TOC</value>
  </data>
  <data name="NodeLabelVtNamed" xml:space="preserve">
    <value>Vartrees (named)</value>
  </data>
  <data name="NodeLabelVtReal" xml:space="preserve">
    <value>Vartrees (real)</value>
  </data>
  <data name="NoSelect" xml:space="preserve">
    <value>No Selection</value>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="SaveErrorBadChars" xml:space="preserve">
    <value>Invalid characters</value>
  </data>
  <data name="SaveErrorBlankSeg" xml:space="preserve">
    <value>Blank path segment</value>
  </data>
  <data name="SaveErrorRequired" xml:space="preserve">
    <value>Save name required</value>
  </data>
  <data name="SaveErrorSpace" xml:space="preserve">
    <value>Loading or trailing space</value>
  </data>
  <data name="SaveInstruct" xml:space="preserve">
    <value>The report name can be a plain name like 'My&amp;#xa0;Report' or it can be prefixed with a path like 'Billing/June/My&amp;#xa0;Report'. Any existing report with the same name will overwritten.</value>
  </data>
  <data name="SaveLabelName" xml:space="preserve">
    <value>Path/Name</value>
  </data>
  <data name="TabLinesHead" xml:space="preserve">
    <value>Browse</value>
  </data>
  <data name="TabLogHead" xml:space="preserve">
    <value>Log</value>
  </data>
  <data name="TabSpecHead" xml:space="preserve">
    <value>Specification</value>
  </data>
  <data name="WorkTitleDeleteReport" xml:space="preserve">
    <value>Delete Report</value>
  </data>
  <data name="WorkTitleGentab" xml:space="preserve">
    <value>Generate Report</value>
  </data>
  <data name="WorkTitleLoadAxis" xml:space="preserve">
    <value>Deep load axis</value>
  </data>
  <data name="WorkTitleLoadLines" xml:space="preserve">
    <value>Load raw table lines</value>
  </data>
  <data name="WorkTitleLoadVar" xml:space="preserve">
    <value>Deep load variable</value>
  </data>
  <data name="WorkTitleLoadVartree" xml:space="preserve">
    <value>Deep load real vartree</value>
  </data>
  <data name="WorkTitleNewReport" xml:space="preserve">
    <value>New Report</value>
  </data>
  <data name="WorkTitleOpenLoadJob" xml:space="preserve">
    <value>Open and deep load job</value>
  </data>
  <data name="WorkTitleSaveReport" xml:space="preserve">
    <value>Save Report</value>
  </data>
</root>