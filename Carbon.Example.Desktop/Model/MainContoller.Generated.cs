//================================================================================================
// <auto-generated>
// This code was generated by a tool on machine OWL at local time 15/04/2025 17:59:15.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//================================================================================================
using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.Windows.Threading;
using RCS.Carbon.Licensing.Shared;
using RCS.Carbon.Shared;
using RCS.Carbon.Tables;

#nullable enable

namespace Carbon.Example.Desktop.Model
{
	partial class MainController
	{
		string? _statusMessage;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? StatusMessage
		{
			get => _statusMessage;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_statusMessage != newval)
				{
					_statusMessage = newval;
					OnPropertyChanged(nameof(StatusMessage));
				}
			}
		}

		string? _busyMessage;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? BusyMessage
		{
			get => _busyMessage;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_busyMessage != newval)
				{
					_busyMessage = newval;
					OnPropertyChanged(nameof(BusyMessage));
					OnPropertyChanged(nameof(IsBusy));
					OnPropertyChanged(nameof(IsIdle));
				}
			}
		}

		int _appFontSize = 13;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public int AppFontSize
		{
			get => _appFontSize;
			set
			{
				if (_appFontSize != value)
				{
					_appFontSize = value;
					OnPropertyChanged(nameof(AppFontSize));
				}
			}
		}

		int _mainTabIndex;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public int MainTabIndex
		{
			get => _mainTabIndex;
			set
			{
				if (_mainTabIndex != value)
				{
					_mainTabIndex = value;
					OnPropertyChanged(nameof(MainTabIndex));
				}
			}
		}

		string _statusTime = "Loading...";
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string StatusTime
		{
			get => _statusTime;
			set
			{
				if (_statusTime != value)
				{
					_statusTime = value;
					OnPropertyChanged(nameof(StatusTime));
				}
			}
		}

		ObservableCollection<AppNode> _obsNodes = [];
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public ObservableCollection<AppNode> ObsNodes
		{
			get => _obsNodes;
			set
			{
				if (_obsNodes != value)
				{
					_obsNodes = value;
					OnPropertyChanged(nameof(ObsNodes));
				}
			}
		}

		AppNode? _selectedNode;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public AppNode? SelectedNode
		{
			get => _selectedNode;
			set
			{
				if (_selectedNode != value)
				{
					_selectedNode = value;
					OnPropertyChanged(nameof(SelectedNode));
					Dispatcher.CurrentDispatcher.InvokeAsync(async () => await AfterNodeSelectAsync());
				}
			}
		}

		ObservableCollection<LogRow> _obsLog = [];
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public ObservableCollection<LogRow> ObsLog
		{
			get => _obsLog;
			set
			{
				if (_obsLog != value)
				{
					_obsLog = value;
					OnPropertyChanged(nameof(ObsLog));
				}
			}
		}

		string? _alertTitle;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? AlertTitle
		{
			get => _alertTitle;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_alertTitle != newval)
				{
					_alertTitle = newval;
					OnPropertyChanged(nameof(AlertTitle));
				}
			}
		}

		string? _alertDetail;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? AlertDetail
		{
			get => _alertDetail;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_alertDetail != newval)
				{
					_alertDetail = newval;
					OnPropertyChanged(nameof(AlertDetail));
				}
			}
		}

		string? _authenticatingMessage;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? AuthenticatingMessage
		{
			get => _authenticatingMessage;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_authenticatingMessage != newval)
				{
					_authenticatingMessage = newval;
					OnPropertyChanged(nameof(AuthenticatingMessage));
				}
			}
		}

		Exception? _authError;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public Exception? AuthError
		{
			get => _authError;
			set
			{
				if (_authError != value)
				{
					_authError = value;
					OnPropertyChanged(nameof(AuthError));
				}
			}
		}

		ILicensingProvider? _provider;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public ILicensingProvider? Provider
		{
			get => _provider;
			set
			{
				if (_provider != value)
				{
					_provider = value;
					OnPropertyChanged(nameof(Provider));
				}
			}
		}

		CrossTabEngine? _engine;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public CrossTabEngine? Engine
		{
			get => _engine;
			set
			{
				if (_engine != value)
				{
					_engine = value;
					OnPropertyChanged(nameof(Engine));
				}
			}
		}

		LicenceInfo? _licence;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public LicenceInfo? Licence
		{
			get => _licence;
			set
			{
				if (_licence != value)
				{
					_licence = value;
					OnPropertyChanged(nameof(Licence));
				}
			}
		}

		CustomerNode? _openCustomerNode;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public CustomerNode? OpenCustomerNode
		{
			get => _openCustomerNode;
			set
			{
				if (_openCustomerNode != value)
				{
					_openCustomerNode = value;
					OnPropertyChanged(nameof(OpenCustomerNode));
				}
			}
		}

		string? _openVartreeName;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? OpenVartreeName
		{
			get => _openVartreeName;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_openVartreeName != newval)
				{
					_openVartreeName = newval;
					OnPropertyChanged(nameof(OpenVartreeName));
				}
			}
		}

		JobNode? _openJobNode;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public JobNode? OpenJobNode
		{
			get => _openJobNode;
			set
			{
				if (_openJobNode != value)
				{
					_openJobNode = value;
					OnPropertyChanged(nameof(OpenJobNode));
				}
			}
		}

		TocLeafNode? _openReportNode;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public TocLeafNode? OpenReportNode
		{
			get => _openReportNode;
			set
			{
				if (_openReportNode != value)
				{
					_openReportNode = value;
					OnPropertyChanged(nameof(OpenReportNode));
				}
			}
		}

		TableSpec? _reportSpec;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public TableSpec? ReportSpec
		{
			get => _reportSpec;
			set
			{
				if (_reportSpec != value)
				{
					_reportSpec = value;
					OnPropertyChanged(nameof(ReportSpec));
				}
			}
		}

		XDisplayProperties? _reportProps;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public XDisplayProperties? ReportProps
		{
			get => _reportProps;
			set
			{
				if (_reportProps != value)
				{
					_reportProps = value;
					OnPropertyChanged(nameof(ReportProps));
				}
			}
		}

		string? _reportTop;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? ReportTop
		{
			get => _reportTop;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_reportTop != newval)
				{
					_reportTop = newval;
					OnPropertyChanged(nameof(ReportTop));
				}
			}
		}

		string? _reportSide;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? ReportSide
		{
			get => _reportSide;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_reportSide != newval)
				{
					_reportSide = newval;
					OnPropertyChanged(nameof(ReportSide));
				}
			}
		}

		string? _reportFilter;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? ReportFilter
		{
			get => _reportFilter;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_reportFilter != newval)
				{
					_reportFilter = newval;
					OnPropertyChanged(nameof(ReportFilter));
				}
			}
		}

		string? _reportWeight;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? ReportWeight
		{
			get => _reportWeight;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_reportWeight != newval)
				{
					_reportWeight = newval;
					OnPropertyChanged(nameof(ReportWeight));
				}
			}
		}

		bool _filterActive;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public bool FilterActive
		{
			get => _filterActive;
			set
			{
				if (_filterActive != value)
				{
					_filterActive = value;
					OnPropertyChanged(nameof(FilterActive));
				}
			}
		}

		bool _weightActive;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public bool WeightActive
		{
			get => _weightActive;
			set
			{
				if (_weightActive != value)
				{
					_weightActive = value;
					OnPropertyChanged(nameof(WeightActive));
				}
			}
		}

		string[]? _textLines;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string[]? TextLines
		{
			get => _textLines;
			set
			{
				if (_textLines != value)
				{
					_textLines = value;
					OnPropertyChanged(nameof(TextLines));
				}
			}
		}

		string? _reportTextBody;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public string? ReportTextBody
		{
			get => _reportTextBody;
			set
			{
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (_reportTextBody != newval)
				{
					_reportTextBody = newval;
					OnPropertyChanged(nameof(ReportTextBody));
				}
			}
		}

		int _reportTabIndex;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public int ReportTabIndex
		{
			get => _reportTabIndex;
			set
			{
				if (_reportTabIndex != value)
				{
					_reportTabIndex = value;
					OnPropertyChanged(nameof(ReportTabIndex));
				}
			}
		}

		bool _isNewReport;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public bool IsNewReport
		{
			get => _isNewReport;
			set
			{
				if (_isNewReport != value)
				{
					_isNewReport = value;
					OnPropertyChanged(nameof(IsNewReport));
				}
			}
		}

		XSigType _selectedSigType = XSigType.SingleCell;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public XSigType SelectedSigType
		{
			get => _selectedSigType;
			set
			{
				if (_selectedSigType != value)
				{
					_selectedSigType = value;
					OnPropertyChanged(nameof(SelectedSigType));
				}
			}
		}

		XOutputFormat _selectedOutputFormat = XOutputFormat.CSV;
		[GeneratedCode("TextTemplatingService", "17.0.0.0")]
		public XOutputFormat SelectedOutputFormat
		{
			get => _selectedOutputFormat;
			set
			{
				if (_selectedOutputFormat != value)
				{
					_selectedOutputFormat = value;
					OnPropertyChanged(nameof(SelectedOutputFormat));
				}
			}
		}

	}
}
