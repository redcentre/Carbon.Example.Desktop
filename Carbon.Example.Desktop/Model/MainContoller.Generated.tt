<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	string[] lines = new string[]
	{
		// type|name|default|send,send|Setting|PostMethod
		"string?|StatusMessage",
		"string?|BusyMessage||IsBusy,IsIdle",
		"int|AppFontSize|13",
		"int|MainTabIndex",
		"string|StatusTime|Loading...",
		"ObservableCollection<AppNode>|ObsNodes|[]",
		"AppNode?|SelectedNode||||AfterNodeSelectAsync",
		"ObservableCollection<LogRow>|ObsLog|[]",
		"string?|AlertTitle",
		"string?|AlertDetail",
		"string?|AuthenticatingMessage",
		"Exception?|AuthError",
		"ILicensingProvider?|Provider",
		"CrossTabEngine?|Engine",
		"LicenceInfo?|Licence",
		"CustomerNode?|OpenCustomerNode",
		"string?|OpenVartreeName",
		"JobNode?|OpenJobNode",
		"TocLeafNode?|OpenReportNode",
		"TableSpec?|ReportSpec",
		"XDisplayProperties?|ReportProps",
		"string?|ReportTop",
		"string?|ReportSide",
		"string?|ReportFilter",
		"string?|ReportWeight",
		"bool|FilterActive",
		"bool|WeightActive",
		"string[]?|TextLines",
		"string?|ReportTextBody",
		"int|ReportTabIndex",
		"bool|IsNewReport",
		"XSigType|SelectedSigType|XSigType.SingleCell",
		"XOutputFormat|SelectedOutputFormat|XOutputFormat.CSV"
	};
	string ttname = Host.GetType().Name;
	Version ttver = Host.GetType().Assembly.GetName().Version;
#>
//================================================================================================
// <auto-generated>
// This code was generated by a tool on machine <#=Environment.MachineName#> at local time <#=DateTime.Now.ToString()#>.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//================================================================================================
using System;
using System.CodeDom.Compiler;
using System.Collections.ObjectModel;
using System.Windows.Threading;
using RCS.Carbon.Licensing.Shared;
using RCS.Carbon.Shared;
using RCS.Carbon.Tables;

#nullable enable

namespace Carbon.Example.Desktop.Model
{
	partial class MainController
	{
<#
	foreach (string line in lines)
	{
		string[] tokens = line.Split('|');
		string type = tokens[0];
		string name = tokens[1];
		string privname = "_" + name.Substring(0,1).ToLower() + name.Substring(1);
		string defalt = tokens.ElementAtOrDefault(2);
		string showdef = "";
		if (defalt?.Length > 0)
		{
			if (type == "string")
			{
				showdef = " = \"" + defalt + "\"";
			}
			else
			{
				showdef = " = " + defalt;
			}
		}
		string sendjoin = tokens.ElementAtOrDefault(3);
		bool setting = tokens.ElementAtOrDefault(4) == "Setting";
		string postMethod= tokens.ElementAtOrDefault(5);
		string[] sends = sendjoin?.Length > 0 ? sendjoin.Split(',') : new string[0];
#>
		<#=type#> <#=privname#><#=showdef#>;
		[GeneratedCode("<#=ttname#>", "<#=ttver#>")]
		public <#=type#> <#=name#>
		{
			get => <#=privname#>;
			set
			{
<#
		if (type == "string?")
		{
#>
				string? newval = string.IsNullOrEmpty(value) ? null : value;
				if (<#=privname#> != newval)
				{
					<#=privname#> = newval;
<#
		}
		else
		{
#>
				if (<#=privname#> != value)
				{
					<#=privname#> = value;
<#
		}
#>
					OnPropertyChanged(nameof(<#=name#>));
<#
		foreach (var send in sends)
		{
#>
					OnPropertyChanged(nameof(<#=send#>));
<#
		}
		if (setting)
		{
#>
					Settings.Put(null, nameof(<#=name#>), <#=privname#>);
<#
		}
		if (postMethod != null)
		{
			if (postMethod.EndsWith("Async"))
			{
#>
					Dispatcher.CurrentDispatcher.InvokeAsync(async () => await <#=postMethod#>());
<#
			}
			else
			{
#>
					_ = <#=postMethod#>();
<#
			}
		}
#>
				}
			}
		}

<#
	}
#>
	}
}
